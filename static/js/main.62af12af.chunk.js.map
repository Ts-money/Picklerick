{"version":3,"sources":["logo.svg","components/Header/header.js","components/Modal/modal.js","components/Picture/picture.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","counter","react_default","a","createElement","class","className","count","Modal","display","concat","show","id","style","onClick","onHide","restart","RickAndMortyPictures","showInput","movieProps","pictures","map","picture","key","alt","name","src","image","handleIncrement","App","state","alreadyClicked","showModal","input","numberCorrect","_this","includes","setState","_","shuffle","push","closeModal","Header_header","this","components_Picture_picture","Modal_modal","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.62af12af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.495d93cc.svg\";","import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nfunction Header(props) {\r\n\r\n    const position = { position: props.counter };\r\n\r\n    return (\r\n        <div class=\"text-center\">\r\n            <nav class=\"navv\">\r\n                <h1 className=\"title\">PICKLERICK!!</h1>\r\n            </nav>\r\n            <br></br>\r\n            <h3 className=\"counter\" >Counter: {props.count}</h3>\r\n            <div className=\"instructions\">\r\n                <h3>Instructions: In this game you must click all the pictures without clicking any repeats to win the game!</h3>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./modal.css\";\r\n\r\n\r\nfunction Modal(props) {\r\n\r\n    const display = {display: `${props.show}`};\r\n\r\n    return (\r\n        <div id=\"congratsModal\" className=\"modal\" style={display}>\r\n            <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                <h2>Congratulations!</h2>\r\n                    <span className=\"close\" onClick={props.onHide}>&times;</span>\r\n                    \r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <p>Well done! You clicked all of them!</p>\r\n                <p>Would you like to restart the game?</p>\r\n                <button className=\"yes\" onClick={props.restart}>Sure</button> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Modal;","import React from \"react\";\r\nimport \"./picture.css\";\r\n\r\nfunction RickAndMortyPictures(props) {\r\n\r\n    const display = { display: `${props.showInput}` };\r\n\r\n    const movieProps = props.pictures.map(picture => (\r\n        <div className=\"card\" key={picture.id}>\r\n            <img className=\"picture card-img-top\" alt={picture.name} src={picture.image} onClick={() => props.handleIncrement(picture.id)} />\r\n        </div>\r\n    ));\r\n\r\n    return (\r\n        <div className=\"imgArea\">\r\n            {movieProps}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default RickAndMortyPictures;","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport Header from \"./components/Header/header\";\nimport Modal from \"./components/Modal/modal\";\nimport RickAndMortyPictures from \"./components/Picture/picture\";\nimport pictures from \"./pictures.json\";\nimport _ from \"underscore\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n    count: 0,\n    pictures,\n    alreadyClicked: [],\n    showModal: \"none\",\n    showInput: \"none\",\n    counter: \"fixed\",\n    input: \"\",\n    numberCorrect: 0\n  }\n\n  handleIncrement = id => {\n    if(!this.state.alreadyClicked.includes(pictures[id - 1])) {\n      if (this.state.count < 14) {\n        this.state.alreadyClicked.push(pictures[id - 1]);\n        this.setState({\n          count: this.state.count + 1,\n          pictures: _.shuffle(pictures)\n        });\n      } else if (this.state.count > 13) {\n        this.setState({\n          showModal: \"block\",\n          counter: \"absolute\",\n          count: 15\n        });\n      }\n    } else {\n      this.setState({\n        count: 0,\n        pictures: _.shuffle(pictures),\n        alreadyClicked: []\n      });\n    }\n  }\n\n  closeModal = () => {\n    this.setState({ showModal: \"none\" });\n  }\n\n  restart = () => {\n    this.setState({\n      count: 0,\n      pictures,\n      alreadyClicked: [],\n      showModal: \"none\",\n      showInput: \"none\",\n      counter: \"fixed\",\n      input: \"\",\n      numberCorrect: 0\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header count={this.state.count} counter={this.state.counter} />\n        <RickAndMortyPictures pictures={this.state.pictures} handleIncrement={this.handleIncrement} showInput={this.state.showInput} />\n        <Modal show={this.state.showModal} onHide={this.closeModal} restart={this.restart} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}